#==============================================================================
# Sample test configuration file for SetConfigurationCMake
#
#
#==============================================================================

#
# Sample Trilinos(ish) Configuration
# - This configuration is made to look similar to what we might have in a
#   `deployment` configuration.
#
[CMAKE_GENERATOR_NINJA]
opt-set cmake
opt-set -G : Ninja

[TRILINOS_COMMON]
opt-set-cmake-var  Trilinos_ENABLE_COMPLEX              BOOL   : ON
opt-set-cmake-var  Trilinos_ENABLE_THREAD_SAFE          BOOL   : ON
# These are left UNTYPED so they aren't considered CACHE
# vars. This will cause the bash generator to skip them.
opt-set-cmake-var  Trilinos_PARALLEL_COMPILE_JOBS_LIMIT : 20
opt-set-cmake-var  Trilinos_PARALLEL_LINK_JOBS_LIMIT    : 4

[CMAKE_SOURCE_DIR]
opt-set /path/to/source/dir

[CMAKE_KOKKOS_DEFAULT]
opt-set-cmake-var  Trilinos_ENABLE_Kokkos         BOOL : ON
opt-set-cmake-var  Trilinos_ENABLE_KokkosCore     BOOL : ON
opt-set-cmake-var  Trilinos_ENABLE_KokkosKernels  BOOL : ON
opt-set-cmake-var  KokkosKernels_ENABLE_EXAMPLES  BOOL : ON

[CMAKE_MUELU_DEFAULT]
opt-set-cmake-var  Trilinos_ENABLE_MueLu  BOOL : ON
opt-set-cmake-var  MueLu_ENABLE_TESTS     BOOL : ON

[CMAKE_TPETRA_DEFAULT]
opt-set-cmake-var  Trilinos_ENABLE_Tpetra BOOL : ON
opt-set-cmake-var  Tpetra_INST_DOUBLE     BOOL : ON

[TRILINOS_CONFIGURATION_ALPHA]
use CMAKE_GENERATOR_NINJA
use TRILINOS_COMMON
use CMAKE_KOKKOS_DEFAULT
use CMAKE_TPETRA_DEFAULT
use CMAKE_MUELU_DEFAULT
use CMAKE_SOURCE_DIR
opt-remove Trilinos_ENABLE_MueLu
opt-remove MueLu SUBSTR


[TEST_CMAKE_FAIL_ON_PARENT_SCOPE_AND_FORCE]
# PARENT_SCOPE makes the value a non-cache option
# but FORCE requires a cache type
# CMake will error if you give both so we should raise an exception here.
opt-set-cmake-var CMAKE_VAR_A PARENT_SCOPE FORCE : CMAKE_VAR_A_VAL


[TEST_CMAKE_CACHE_PARAM_ORDER]
opt-set-cmake-var CMAKE_VAR_A FORCE        : ON
opt-set-cmake-var CMAKE_VAR_B PARENT_SCOPE : ON
opt-set-cmake-var CMAKE_VAR_C BOOL         : ON
opt-set-cmake-var CMAKE_VAR_D BOOL FORCE   : ON
opt-set-cmake-var CMAKE_VAR_E FORCE BOOL   : ON
opt-set-cmake-var CMAKE_VAR_F BOOL PARENT_SCOPE : ON
opt-set-cmake-var CMAKE_VAR_G PARENT_SCOPE BOOL : ON


[TEST_CMAKE_CACHE_PARAM_TEST_02]
# Validate what happens if there's a bad param.
# Note: FORCE option will make this a CACHE var of type STRING
opt-set-cmake-var CMAKE_VAR_A FORCE FOOBAR: ON


# This section is to be used to ensure that PARENT_SCOPE
# will force a type-1 (non-cache) var.
# The entries with PARENT_SCOPE enabled should not appear
# in generated BASH output.
[TEST_CMAKE_PARENT_SCOPE_NOT_BASH]
opt-set-cmake-var FOO_VAR_A PARENT_SCOPE        : FOO_VAL A
opt-set-cmake-var FOO_VAR_B STRING PARENT_SCOPE : FOO_VAL B



#
# Sample Test Configurations
#
[TEST_CMAKE_CACHE_OPTION_WITH_OPTIONAL_TYPE]
opt-set-cmake-var CMAKE_VAR_NAME_A OPTIONAL_TYPE : ON


[TEST_CMAKE_CACHE_OPTION_WITHOUT_OPTIONAL_TYPE]
opt-set-cmake-var CMAKE_VAR_NAME_B : ON


[TEST_GENERIC_OPTION_SET]
opt-set -A Param1 Param2 Param3 : VALUE


[TEST_OPTION_REMOVAL_VARIABLES]
opt-set -A Param1 Param2 Param3 : VALUE_A
opt-set -B Param4 Param5 Param6 : VALUE_B
opt-set -C Arg1   Arg2   Arg3   : VALUE_C

[TEST_OPTION_REMOVAL_VARS_01]
use TEST_OPTION_REMOVAL_VARIABLES
opt-remove Param2

[TEST_OPTION_REMOVAL_VARS_02]
use TEST_OPTION_REMOVAL_VARIABLES
opt-remove Param SUBSTR


[TEST_GEN_OPTION_LIST_ERROR_01]
opt-set Param1 Param2 Param3 : Value_A


[TEST_OPT_REMOVE_NO_PARAMS_01]
opt-remove


[TEST_EXPANSION_IN_ARGUMENT]
opt-set TEST_PATH : ${PATH}


[TEST_SPACES_IN_VALUE]
opt-set TEST_OPTIONS : -ldl -fsanitize=address


[TEST_SPACES_AND_EXPANSION]
opt-set TEST_OPTIONS : -L${PATH|ENV} -ldl -fsanitize=address


[TEST_VARIABLE_EXPANSION_IN_CMAKE_VAR]
opt-set cmake
opt-set-cmake-var ENABLE_FLAG BOOL : ON
opt-set-cmake-var CMAKE_EXE_LINKER_FLAGS STRING : "${CMAKE_EXE_LINKER_FLAGS} -ldl -fsanitize=address"


[TEST_SECTION]
opt-set OPTS : FOO 'BAR BAZ'


[TEST_VAR_EXPANSION_ENV]
opt-set FOO : "${FOOBAR|ENV} -baz"


[TEST_VAR_EXPANSION_NO_TYPE]
opt-set FOO : "${FOOBAR} -baz"


#
# Variable expansion tests
#
[TEST_VAR_EXPANSION_COMMON]
# Create the CACHE variable CMAKE_CXX_FLAGS of STRING type.
opt-set-cmake-var CMAKE_CXX_FLAGS STRING : "${LDFLAGS|ENV} -foo"

[TEST_VAR_EXPANSION_UPDATE_01]
# Test an 'update' of CMAKE_CXX_FLAGS that is not FORCE
# - In practice, CMake would not actually update CMAKE_CXX_FLAGS
#   here because it's a CACHE var (per TEST_VAR_EXPANSION_COMMON)
#   And CMake won't overwrite CACHE vars unless FORCEd.
opt-set cmake
use TEST_VAR_EXPANSION_COMMON
opt-set-cmake-var CMAKE_CXX_FLAGS STRING : "${CMAKE_CXX_FLAGS|CMAKE} -bar"

[TEST_VAR_EXPANSION_UPDATE_02]
opt-set cmake
use TEST_VAR_EXPANSION_COMMON
# This should be a problem for Bash generation since the CMake var
# CMAKE_F90_FLAGS would be unknown to bash. Depending on the
# exception_control_level this will either trigger an exception when
# sent to the bash generator or it could resolve the CMAKE var to an
# empty string + warning.
opt-set-cmake-var CMAKE_F90_FLAGS STRING: "${CMAKE_F90_FLAGS|CMAKE} -baz"

[TEST_VAR_EXPANSION_UPDATE_03]
# Updates CMAKE_CXX_FLAGS using a FORCE operation.
# In practice, this would result in CMAKE_CXX_FLAGS = "${LDFLAGS|ENV} -foo -bif"
use TEST_VAR_EXPANSION_UPDATE_01
opt-set-cmake-var CMAKE_CXX_FLAGS STRING FORCE : "${CMAKE_CXX_FLAGS|CMAKE} -bif"


[TEST_STRING_DOUBLE_QUOTES]
opt-set-cmake-var FOO STRING: foo::bar::baz<Type>
opt-set-cmake-var BAR STRING: "600"


[TEST_CMAKE_VAR_REMOVE]
# Test whether or not opt-remove works for a cmake var
opt-set-cmake-var FOO_TEST STRING : "FOO"
opt-set-cmake-var BAR_TEST STRING : "BAR"
opt-set-cmake-var BAZ_TEST STRING : "BAZ"
# opt-remove FOO_TEST should remove the FOO_TEST entry
# and leave only the BAR_TEST and BAZ_TEST entries.
opt-remove FOO_TEST


[TEST_CMAKE_VAR_FORCE_ONLY]
opt-set-cmake-var FOO FORCE : "BAR"


[TEST_CMAKE_VAR_IN_BASH_GENERATOR]
# The purpose of this section is to see what we do if someone
# has an _update_ operation (i.e., append/prepend to an existing var)
# and that cmake var does not exist already. In this case we emulate
# this by simulating a typo but it could occur in other cases where
# a cmake generator would expect a fragment to update something that was
# defined elsewhere. Should the bash generator throw an error or replace
# "FOO_VAE" with an empty string?
#
# Set FOO_VAR to something concrete
opt-set-cmake-var FOO_VAR STRING : "FOO"
# Simulated typo in FOO_VAR update
opt-set-cmake-var FOO_VAR FORCE  : "BAR ${FOO_VAE|CMAKE}"
